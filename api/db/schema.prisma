datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run yarn redwood prisma migrate dev
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
//model UserExample {
//  id    Int     @id @default(autoincrement())
//  email String  @unique
//  name  String?
//}

// What about days off?
model Worker {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  phone            String?
  email            String?
  addressId        Int?              @unique
  address          Address?          @relation(fields: [addressId], references: [id])
  jobType          String? //think about making flexible
  employmentStatus String            @default("active") //change to bool, int maybe later
  shifts           ShiftAssignment[]
  assessments      Assessment[]
  tags             TagLink[]
}

model Worksite {
  id        Int        @id @default(autoincrement())
  name      String
  locations Location[]
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  shifts     Shift[]
  worksiteId Int
  worksite   Worksite @relation(fields: [worksiteId], references: [id])
}

model Shift {
  id         Int               @id @default(autoincrement())
  name       String
  locationId Int
  location   Location          @relation(fields: [locationId], references: [id])
  workers    ShiftAssignment[]
}

model ShiftAssignment {
  id       Int    @id @default(autoincrement())
  workerId Int
  worker   Worker @relation(fields: [workerId], references: [id])
  shiftId  Int
  shift    Shift  @relation(fields: [shiftId], references: [id])

  @@unique([workerId, shiftId])
}

model Address {
  id         Int     @id @default(autoincrement())
  firstLine  String
  secondLine String?
  city       String
  state      String
  postal     String
  worker     Worker? //future problemo? maybe share address with something else
}

// enum Rating {
//   NO_CONTACT
//   UNION_LEADER
//   UNION_SUPPORTER
//   UNDECIDED
//   ANTI_UNION
//   ANTI_UNION_LEADER
// }

model Assessment {
  id       Int      @id @default(autoincrement())
  rating   Int
  workerId Int
  worker   Worker   @relation(fields: [workerId], references: [id])
  date     DateTime @default(now())
  notes    String
}

model TagLink {
  id       Int      @id @default(autoincrement())

  workerId Int
  worker   Worker   @relation(fields: [workerId], references: [id])
  tagId    Int
  tag      Tag @relation(fields: [tagId], references: [id])

  date     DateTime @default(now())

  @@unique([workerId, tagId])
}

// ie,
// went to an organizing dinner
// signed a petition
// said "unions are cool and good"

// follow up question: would anyone want to know when a tag was given?

model Tag {
  id       Int @id @default(autoincrement())

  name     String
  color    String @default("grey")
  shape    String @default("circle")

  date     DateTime @default(now())

  workers  TagLink[]
}
